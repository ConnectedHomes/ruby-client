#!/usr/bin/env ruby

#     Copyright 2015 Wavefront Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
#    limitations under the License.
#
require 'wavefront/client'
require 'slop'
require 'pathname'
require 'wavefront/cli'

begin
options = Slop.parse(strict: true) do
  banner 'Usage: wavefront COMMAND QUERY (OPTIONS)'
    on 'h', 'help', 'Display this message'

  command :version do
    description 'Display the client version and exit'
    run do
      puts Wavefront::Client::VERSION
      exit 0
    end
  end

  command 'ts' do
    description "Query the timeseries"
    on 'c', 'config=', 'path to configuration file', default:
                      Pathname.new(ENV['HOME']) + '.wavefront'
    on 'P', 'profile=', 'profile in configuration file', default: 'default'
    on 'D', 'debug', 'Enable debug mode'
    on 'S', 'seconds', 'Query granularity of seconds'
    on 'm', 'minutes', 'Query granularity of minutes'
    on 'H', 'hours', 'Query granularity of hours'
    on 'd', 'days', 'Query granularity of days'
    on 's', 'start=', 'start of query window in epoch seconds or parseable format'
    on 'e', 'end=', 'end of query window in epoch seconds or parseable format'
    on 't', 'token=', 'Wavefront authentication token'
    on 'E', 'endpoint=', 'Connect to alternative cluster endpoint', default: Wavefront::Client::DEFAULT_HOST.to_s
    on 'f', 'format=', "Output format (#{Wavefront::Client::FORMATS.join(', ')})", default: Wavefront::Client::DEFAULT_FORMAT.to_s
    on 'p', 'prefixlength=', 'Number of path elements to treat as a prefix in schema manipulation', default: Wavefront::Client::DEFAULT_PREFIX_LENGTH
    on 'X', 'strict=','Flag to not return points outside the query window [q;s) ', default: Wavefront::Client::DEFAULT_STRICT
    on 'O', 'includeObsoleteMetrics=', 'Include metrics which have not reported for > 4 weeks', default: Wavefront::Client::DEFAULT_OBSOLETE_METRICS
    on 'h', 'help', 'Display this message'
    run do |options, arguments|
      pf_opts = Wavefront::Cli.new(options, arguments).load_profile || {}
      require 'wavefront/cli/ts'
      cli = Wavefront::Cli::Ts.new(options.to_hash.merge(pf_opts), arguments)
      begin
        cli.run
      rescue => e
        puts 'Timeseries query failed.'
        puts e
        exit 1
      end
    end
  end

  command 'alerts' do
    banner 'Usage: wavefront alerts (OPTIONS) ALERT_STATE'
    description "Query alerts"
    on 'c', 'config=', 'path to configuration file', default:
                      Pathname.new(ENV['HOME']) + '.wavefront'
    on 'P', 'profile=', 'profile in configuration file', default: 'default'
    on 'E', 'endpoint=', 'Connect to alternative cluster endpoint', default: Wavefront::Client::DEFAULT_HOST.to_s
    on 'f', 'format=', 'Output format (ruby, json)', default: 'ruby'
    on 'f', 'format=', "Output format (#{Wavefront::Client::ALERT_FORMATS.join(', ')})", default: Wavefront::Client::DEFAULT_ALERT_FORMAT.to_s
    on 'h', 'help', 'Display this message'
    on 'p', 'private=', 'Retrieve only alerts with named private tags, comma delimited.'
    on 's', 'shared=', 'Retrieve only alerts with named shared tags, comma delimited.'
    on 't', 'token=', 'Wavefront authentication token'
    run do |options, arguments|
      pf_opts = Wavefront::Cli.new(options, arguments).load_profile || {}
      require 'wavefront/cli/alerts'
      cli = Wavefront::Cli::Alerts.new(options.to_hash.merge(pf_opts),
                                       arguments)
      begin
        cli.run
      rescue => e
        puts 'Alert query failed.'
        puts e
        exit 1
      end
    end
  end


end
rescue Slop::InvalidOptionError => e
  puts 'invalid option error: '+ e.to_s
  exit 1
rescue Slop::MissingArgumentError => e
  puts 'option parsing error: '+ e.to_s
  exit 1
end

puts options
